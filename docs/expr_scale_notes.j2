<h1>Scale Notes & Chords</h1>
<hr/>

<p>
Now that you know how to input specific {{ doc('expr_literal', 'Literal Notes') }}, it is time to learn how to input
notes that will respond to scale/mode changes.</p>

{{ begin_info_block() }}
Most DAWs implement scales with "force to scale" semantics, which can
result in confusion when scales notes in the input scale do not line up cleanly with the output scale, and makes it difficult to
tell the scale degrees of notes when looking at them. Also, these systems do not allow input of accidental notes (sharps and flats).
Warp handles this totally differently, solving all of these problems.
{{ end_info_block() }}

<p>
Warp uses lists of <i>Arabic</i> numerals to indicate degrees along a scale, and <i>Roman</i> numerals to represent basic chord types.
We'll show you how to access more complex chords as well, using {{ doc('expr_mod', 'Mod Expressions') }}.
</p>

<h2>A Scale Example</h2>

Here is the same scale mentioned in {{ doc('expr_literal') }}, written in a way that will instantly work for any 7-note {{ doc('scale') }}:

{{ begin_code() }}1
2
3
4
5
6
7
{{ end_code() }}

<p>
That was simple - it's just the scale degrees for each note we want to play.
The {{ doc('scale','Scale') }} value will be taken from the clip, if so provided, or if not, can come from the {{ doc('scene','Scene') }}, and if not set there,
will use the value from the {{ doc('song','Song') }}.  If you don't set a scale anywhere, the system will assume the C Major scale.  Users do not even
need to know what notes are in the scale, because Warp will handle all the music theory for you.
</p>

<p>
Scale degrees may also be listed as negative, which shift down from the root, as shown in this sequence:
</p>

{{ begin_code() }}1
-2
4
5
-3
6
-4
1
{{ end_code() }}

<i>Note: The value 0 is not valid here, because we don't know what it would mean. In that sense, it's like Math before the 12th century.</i>

<hr/>
<h3>Roman Numeral Chords</h3>

Chords can be expressed as Roman numerals:

{{ begin_code() }}I
IV
V
{{ end_code() }}

<p>
This notation is already commonly used in music to denote chord progressions.  Like the arabic numerals above, this system is nice because it doesn't care what scale you are in.
</p>

Lowercase roman numerals are used to represent minor chords:

{{ begin_code() }}i
iv
v
{{ end_code() }}

More advanced types can still be represented in Warp using their base notes and chord type:

{{ begin_code() }}1:sus4
2:major
4:power
{{ end_code() }}

Or, equivalently using {{ doc('expr_mod', 'Mod Expressions') }}:

{{ begin_code() }}1 ch=sus4
2 ch=major
4 ch=power
{{ end_code() }}

For reference the built-in chord types you can use this way are:

<ul>
<li>minor</li>
<li>major</li>
<li>dim</li>
<li>aug</li>
<li>sus4</li>
<li>sus2</li>
<li>fourth</li>
<li>power</li>
<li>fifth</li>
<li>M6</li>
<li>m6</li>
<li>dom7</li>
<li>M7</li>
<li>m7</li>
<li>aug7</li>
<li>dim7</li>
<li>mM7</li>
</ul>

{{ begin_info_block() }}
Chords and notes can be mixed together in the same lists. Chords can also be modified by all {{ doc('expr_mod','Mod Expressions') }} exactly like notes can.
{{ end_info_block() }}
