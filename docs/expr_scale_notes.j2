<h1>Scale Notes & Chords</h1>

<p>
Warp uses arabic numerals to indicate degrees along a scale, and roman numerals to represent basic chords.
We'll show you how to make more complex chords as well.
</p>

<h2>A Scale Example</h2>

Here is the same scale mentioned in {{ doc('expr_literal') }} in a way that will work for any 7-note {{ doc('scale') }} setting:

{{ begin_code() }}1
2
3
4
5
6
7
{{ end_code() }}

<p>
This means that we can define a {{ doc('pattern') }} and then the pattern can be then used in any clip using any scale we want.
The {{ doc('scale','Scale') }} value will be taken from the clip, if so provided, or if not, can come from the scene, and if not set there,
will use the value from the song.  If you don't set a scale anywhere, the system will assume the C major scale.
</p>

{{ begin_info_block() }}
Most other sequencer programs and DAWs do not natively understand scales, but instead
"force" notes to the nearest scale note.  This means multiple note entries might map to the same note, or it may be unclear
if something rounds up or down.  Of greater concern, in these force-to-scale systems, the ability to use accidentals is lost.
Another major problem with DAWs is while "force to scale" can often be achieved with a MIDI effect, using multiple scales
together often requires a separate track for every combination of instrument and scale.  This is not the case in Warp!
{{ end_info_block() }}

<p>
Scale notes may also be listed as negative, which shift down from the root, as shown in this sequence:
</p>

{{ begin_code() }}1
-2
4
5
-3
6
-4
1
{{ end_code() }}

<h3>Roman Numeral Chords</h3>

Chords can be expressed as Roman numerals:

{{ begin_code() }}I
IV
V
{{ end_code() }}

This notation is commonly used to denote chord progressions.  Like the arabic numerals above, it is nice because it doesn't care what scale you are in.

Lowercase roman numerals represent minor chords:

{{ begin_code() }}i
iv
v
{{ end_code() }}

More advanced types can be represented using their base notes and chord type:

{{ begin_code() }}1 ch=sus4
2 ch=major
4 ch=power
{{ end_code() }}

<p>
This is a bit of a spoiler as this refers to using {{ doc('expr_mod') }}.
</p>

<p>
An easier shorthand for accessing the full list of chord types is also available:
</p>

{{ begin_code() }}
I:sus4
II:major
IV:power
{{ end_code() }}

For reference the built-in chord types you can use this way are:

<ul>
<li>minor</li>
<li>major</li>
<li>dim</li>
<li>aug</li>
<li>sus4</li>
<li>sus2</li>
<li>fourth</li>
<li>power</li>
<li>fifth</li>
<li>M6</li>
<li>m6</li>
<li>dom7</li>
<li>M7</li>
<li>m7</li>
<li>aug7</li>
<li>dim7</li>
<li>mM7</li>
</ul>

<p>
So we have access to a lot of different chord types, we just don't get to use the roman numeral syntax for anything but major
and minor chords.
</p>
