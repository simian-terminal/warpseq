<h1>Mod Expressions In Transforms</h1>

<p>
Unlike many other sequencer and DAW tools, Warp does not just have Arpeggiators, warp has more complex {{ doc('transforms', 'Transforms') }} that can be used to build arps, but also
more detailed sets of meta-patterns that transform other patterns.
</p>

<p>
As described in the Transform page, a transform moves across the notes that would have played in each pattern, at every step, and slices them up,
and optionally changes them.

To build an Arp, we only need this in the Transform definition:
</p>

{{ begin_code() }}
0
{{ end_code() }}


<p>
That's it! 0 here just means "play what you would have played".  The transform will always turn a chord into notes. In order to make sure it turns a triad into the full set of
chord notes, we should set the {{ doc('transform', 'Transform') }} "divide" setting to at least 3.  If we set it to 9, it would strum each triad 3 times, very quickly.
</p>

<p>
That's basic though. Transforms can use mod expressions, for instance:
</p>

{{ begin_code() }}
O+2
O+1
0
O+1
O+2
{{ end_code() }}

The above sequence would play the first note in the pattern 2 octaves up, the 1, then as written, then 1 up, and then 2 up.

<p>
Alternatively, the transform can ALSO muck with any parameter it wants, including creation of chords.  Here is a particularly
non-musical example:
</p>

{{ begin_code() }}
0
0 cc10=90 v=80
x
O+1
0 cc10=0:120
{{ end_code() }}

In this example, the first note plays as is, the second does with modified velocity and MIDI CC 10, the third
note is silenced, the fourth note is an octave up, and the fifth note plays as is with random MIDI CC information that
will persist as the transform cycles back on the first slot and finally be overwritten on the second.


