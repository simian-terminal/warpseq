<h2>Randomness</h2>
<hr/>

Additional types of randomness in Warp are not mod expressions themselves (like "p" as shown in the {{ doc('expr_mod', 'Mod Expressions') }} guide"), but are used in the <i>values</i> of mod expressions.

<h3>Random Range</h3>

"Range" picks a value between a range. The inclusive start and end of the range are separated by a colon (":").
In the example below, we randomly jump the third note in a scale pattern by between 0 and 4 octaves each time it plays:

{{ begin_code() }}1
2
3 O+0:4
4
5
6
7
8
{{ end_code() }}

<h3>Random Choice</h3>

"Choice" involves choosing from a list, which allows some control over probability distribution if an entry
appears in a list more than once.  The choices in the list are separated by commas (",")

{{ begin_code() }}1 O+0,2,3
2 O+1,3
3
4
5
6
7
{{ end_code() }}

In the above example, the first note (which is the first note of the selected scale) jumps 0, 2 or 3 octaves, but the chance of an octave jump is only 50%, because two of the values
are zero.  The second note jumps either 1 or 3 octaves.

<p>
Choice is also the only random form that works with non-numeric values, such as this random chord type example:
</p>

{{ begin_code() }}I
3 ch=major,minor
{{ end_code() }}

<p>
In this example, the first chord is definitively a major chord, and the second note is either a major or minor chord, with equal chance.
</p>

<p>
This next quick example shows a 1/3 chance of a minor chord and a 2/3 chance of a major chord.
</p>

{{ begin_code() }}I
3 ch=major,major,minor
{{ end_code() }}

<h2>Using Randomness for Humanization</h2>

Humanizing otherwise repetitive patterns is a popular feature in many sequencers. Below is an example
of humanizing velocity in Warp while playing a two octave scale, with every four notes being full volume:

{{ begin_code() }}1 v=127
2 v=60:80
3 v=60:80
4 v=60:80
5 v=127
6 v=60:80
7 v=60:80
8 v=60:80
9 v=127
10 v=60:80
11 v=60:80
12 v=60:80
13 v=127
14 v=60:80
15 v=60:80
16 v=60:80
{{ end_code() }}

Because MIDI CC's are sticky between notes, assigning random values to CC values can work like a tempo-synced sample
and hold.  The example below changes twice in each pattern iteration:

{{ begin_code() }}1 cc0=0:127
2
3
4
5
6 cc0=0:127
7
8
9
10
{{ end_code() }}

This could be done with multiple MIDI CCs, changing them at different points in the pattern:

{{ begin_code() }}1 cc0=0:127
2
3 cc1=20:127
4
5
6 cc0=0:127
7
8 cc2=40:80
9
10
{{ end_code() }}
