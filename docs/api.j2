<h1>API</h1>
<hr/>

<h2>When To Use The API</h2>

<p>
Soon, Warp will have a performance-and-composition-oriented web interface without requiring any programming.
</p>

<p>
Until then (Fall 2020), the public Python API is available to those wanting to use, explore, and extend Warp.  Even once the UI is available, the API will be useful for creating programmatically generated compositions.
We suspect this will be popular in generative/AI Computer Music audiences, but also for anyone who wants to see and edit their compositions with a text editor.
</p>

<hr/>
<h2>Diving In</h2>

<p>
Focused API examples are part of the project repo under examples/, and you can also browse them on <A HREF="https://bitbucket.org/laserllama/warpseq/src/master/examples/api/">BitBucket</A>.  These examples may
not be musically interesting, but illustrate basic concepts in Warp. In addition to the API examples, there are also full song files generated with Warp, as featured on our <A HREF="/">homepage</A>.  While these
files mostly explain themselves, we should detail how to run them and a little bit more about the Warp object system.
</p>

<hr/>
<h2>Running the API Example Demos</h2>

<p>
The API demos are realtime MIDI programs that send MIDI events to your software or hardware. Listening to them will require you set up some
tracks or devices that can receive MIDI.  To run them, {{ doc('installation', 'checkout warp') }} and then just run then as Python3 programs from your console:
</p>

{{ begin_code() }}cd warp_checkout_location
cd examples/api/
PYTHONPATH=. python3 any_example.py
{{ end_code() }}

<p>
<A HREF="https://bitbucket.org/laserllama/warpseq/src/master/examples/api/">The API demos</A> are written to use a specific MIDI interface. If you don't have yours named the same as ours, you can set an environment variable
to make the demos easy to run, rather than changing the script. On a MAC, this is done as follows:
</p>

{{ begin_code() }}WARP_MIDI_DEVICE="My Device Name" PYTHONPATH=. python3 any_example.py
{{ end_code() }}

Or alternatively:

{{ begin_code() }}export WARP_MIDI_DEVICE="My Device Name"
PYTHONPATH=. python3 any_example.py
{{ end_code() }}

<p>
Most of the included examples use one or two MIDI tracks.  Just search for "tracks' in the code and see what is set up, and try to configure some instruments (in your DAW or hardware) that sound like a good
match. If you need to tweak the track numbers in the instrument definitions in those files, that's also fine.  The drum example should use a kick and a snare drum, but the other demos will sound fine with
any polyphonic synth with a short enough decay and release time. A piano instrument would also be fine.
</p>

<p>
In addition to reading, trying, and tweaking the example code, we recommend reading the other documentation sections, so you can have an idea of sort of variations to try out in the API.
In particular, the API examples only show *some* of the interesting things you can do with the expressions language and transforms.  As you explore the docs,
you will be able to use the API to construct more interesting and varied compositions.
</p>

<hr/>
<h2>Object Model</h2>

<IMG SRC="./object_model.svg">

<hr/>
<h2>API Walkthrough</h2>

<p>
The best way to explore the API is to look at the various examples and start tweaking them, but it may help to provide a bit more explanation to them.
</p>

<p>
Here's a step by step walkthrough of the "00_kick_snare.py" example from the examples folder.  We start off with some python imports so remember
to set the environment variable <i>PYTHONPATH</i> so you can find Warp's checkout directory.
</p>

{{ begin_code() }}from warpseq.api import demo
from warpseq.api.callbacks import Callbacks, DefaultCallback
from warpseq.api.public import Api as WarpApi
{{ end_code() }}

Now we create an API handle and set the tempo:

{{ begin_code() }}# setup API and song
api = WarpApi()
api.song.edit(tempo=120)
{{ end_code() }}

We define what instruments we want to use by device and MIDI channel.  The "suggest_device" method takes
the midi channel from the "WARP_MIDI_DEVICE" environment variable if the default device isn't found:

{{ begin_code() }}# setup instruments
DEVICE = demo.suggest_device(api, 'IAC Driver IAC Bus 1')
api.instruments.add('kick_inst', device=DEVICE, channel=1, min_octave=0, base_octave=0, max_octave=10)
api.instruments.add('snare_inst', device=DEVICE, channel=2, min_octave=0, base_octave=0, max_octave=10)
{{ end_code() }}

Now that we have instruments, we add the instruments to tracks.

{{ begin_code() }}# setup tracks
api.tracks.add(name='kick', instrument='kick_inst', muted=False)
api.tracks.add(name='snare', instrument='snare_inst', muted=False)
{{ end_code() }}

We can add any number of built-in or user scales.  As this is a drum example, we're not really
going to use them though, so see the other examples for scale demos:

{{ begin_code() }}# setup scales
api.scales.add(name='C-major', note='C', octave=3, scale_type='major')
{{ end_code() }}

Now we lay out some drum patterns - patterns are just simple arrays:

{{ begin_code() }}# setup patterns
api.patterns.add(name='kick_4_4',  slots="C1 . .  . C1 . .  . C1 . .  . C1 . .  .".split())
api.patterns.add(name='snare_4_4', slots=".  . D1 . . .  D1 . .  . D1 . .  . D1 .".split())
api.patterns.add(name='kick_alt',  slots="C1 . C1 . C1 . .  . C1 . .  . C1 . .  .".split())
api.patterns.add(name='snare_alt', slots=".  . D1 . .  . D1 D1 .  D1 D1 . .  D1 D1 .".split())
{{ end_code() }}

Now we add some scenes:

{{ begin_code() }}# setup scenes
api.scenes.add(name='scene_1', scale='C-major', auto_advance=True)
api.scenes.add(name='scene_2', scale='C-major', auto_advance=True)
{{ end_code() }}

And some clips, which sit at the intersection of "scenes" and "tracks" in our virtual grid:

{{ begin_code() }}# setup clips
api.clips.add(name='s1k1', scene='scene_1', track='kick', patterns=['kick_4_4'], repeat=4, auto_scene_advance=True)
api.clips.add(name='s1s1', scene='scene_1', track='snare', patterns=['snare_4_4'], repeat=4)
# change the drum pattern, repeat=None implies infinite repeat.
api.clips.add(name='s2k1', scene='scene_2', track='kick', patterns=['kick_alt'], repeat=4, auto_scene_advance=True)
api.clips.add(name='s2s1', scene='scene_2', track='snare', patterns=['snare_alt'], repeat=4)
{{ end_code() }}

And we set the track playing... it will complete when finished or you can hit Ctrl+C to stop it.

{{ begin_code() }}# play starting on the first scene - Ctrl+C to exit.
api.player.loop('scene_1')
{{ end_code() }}

This is just a simple drum pattern, so it will sound best if you put a kick drum sound on Track 1, and a snare
sound on Track 2.  The rest of the <A HREF="https://bitbucket.org/laserllama/warpseq/src/master/examples/api/">API Examples</A>
are more melodic and show off more features, though it seemed best to start with the basics.

{{ begin_info_block() }}
The API above will always be available for generative composition - but will also be used to power the backend of
our web interface, which is next up in development!  As mentioned, look for the first release of the web interface
sometime in the Fall of 2020 - but feel free to enjoy and compose tracks with the API today!
{{ end_info_block() }}

{{ begin_info_block() }}
API Questions, ideas, or just want to share something cool? <A HREF="mailto:michael@michaeldehaan.net">Email Michael</A>.  We'd love to hear your thoughts, features
you would like to see, and to hear about what you are doing with Warp.
{{ end_info_block() }}

<hr/>
<h2>Latency Awareness</h2>

<p>
To improve timing of the program, close other running applications and do not web browse while performing or recording.  Browsers are notorious CPU hogs.
To gain more deterministic timing, you may also want to start the program with "nice -n 20 <your normal arguments".
</p>

<hr/>
<h2>Next Steps!</h2>

Please browse the <A HREF="https://bitbucket.org/laserllama/warpseq/src/master/examples/api/">other API examples</A> for more of what you can do, and the rest
of the document for features regarding patterns, transforms, and mod expressions - where the true power of Warp really comes in!