NOTES
=====

BACKEND
=======



* new mod expression idea:
* 4;c=major ... turn a non-chorded note into a chord or change a chord type. Useful with note grabs (T=track1;p=0.5;c=major)

* make sure note velocity is noticed by the player class
* make the notes support CCs - eventually we may want to interpolate them, but not an immediate need

* build the "friendly" high level API and port the test/assembly.py example to it.
  use arrays, not strings, for lists of expressions.

* cleanup various code hacks
* make sure there's a short cut method for clicking play on a scene that plays all the clips
* increase error handling in expressions using custom exception types
* make a Ctrl-C hook that stops all notes


* UI mockups
** Instrument
** Pattern Edit
** Arp Edit
** Scene Edit
** Track Edit
** Scale select or just edit - probably not user extensible at first
** Grid (Clips)
** Clear Grid
** Save/Load

** text file version idea (or just use JSON and make CLI after all)

* GUI interface idea: flask server and backend thread with opcodes (each opcode takes JSON):

** opcodes for flask: LIST/ADD/EDIT/REMOVE for each
** SONG/{LIST,ADD,EDIT,REMOVE}, same for DEVICE, INSTRUMENT, SCALE, CLIP, PATTERN, ARP, TRACK
** PLAYER/PLAY_CLIPS(list)
** PLAYER/STOP_CLIPS(list)
** PLAYER/START_SCENE
** PLAYER/STOP
** SONG/LOAD filename.json
** SONG/SAVE filename.json

** how do we show the user what pattern symbols are invalid? -- need a method for validating patterns??

** more documentation in rockchisel - get a basic homepage going, maybe move some to inline help?

** start free patreon posts

* verify/fix some little things:

** is pattern overriding the scale (if not set on the clip) implemented?
** is pattern overriding tempo (if not set on the clip) implemented?

* demo vids / songs / tracks
